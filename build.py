#! /usr/bin/env python

import os
import sys
import subprocess


DESCRIPTION = """
Ensure all examples build, and generate an rst description of the contents.
"""


def main(args = sys.argv[1:]):
    with file('README.md', 'w') as f:
        f.write(README_PROLOGUE)

        for casedir in sorted(os.listdir('.')):
            if not casedir.startswith('case_'):
                continue

            f.write('## %s\n\n' % (casedir, ))

            sys.stderr.write('Running: %r in %r\n' % (RUST_BUILD_ARGS, casedir))
            subprocess.check_call(args=RUST_BUILD_ARGS,
                                  cwd=casedir)

            for path in listdir_tree(casedir):
                f.write('### ./%s\n\n```\n' % (path,))

                with file(os.path.join(casedir, path), 'r') as src:
                    for line in src:
                        f.write(line)

                f.write('```\n\n')

        f.write(README_EPILOGUE)


def listdir_tree(rootpath):
    for bd, ds, fs in os.walk(rootpath):
        fs.sort()
        if 'root.rs' in fs:
            # Make 'root.rs' always appear first:
            fs.remove('root.rs')
            fs.insert(0, 'root.rs')

        for f in fs:
            path = os.path.join(bd, f)
            assert path.startswith(rootpath), `rootpath, path`
            yield path[len(rootpath)+1:]


RUST_BUILD_ARGS = ['rust', 'build', '-o', '/tmp/junk', 'root.rs']
RUST_VERSION_ARGS = ['rust', '--version']

README_PROLOGUE = """
# Rust Modules and Paths

The `mod foo;` declaration in [rust](http://rust-lang.org) always
searches for `foo.rs` or `foo/mod.rs` *relative to the path of the
source file* where the `mod`-declaration appears.

Here are four different filesystem layouts of a crate with `a::b::x`
to illustrate this in practice:

"""

README_EPILOGUE = """

## Notes:

This file was generated by `./build.py` which also verifies that the
example directories all build by running:

```bash
$ %s
```

The version of rust used to generate this file was:

```bash
$ %s
%s
```
""" % (
    ' '.join(RUST_BUILD_ARGS),
    ' '.join(RUST_VERSION_ARGS),
    subprocess.check_output(args=RUST_VERSION_ARGS),
    )


if __name__ == '__main__':
    main()
